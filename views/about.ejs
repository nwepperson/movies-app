<!doctype html>
<html lang="en">
  <head>
    <script type="text/javascript" src="/javascripts/main.min.js"></script>
  </head>

  <body>

<script type="text/javascript">
var JH = JH || {};

JH.AboutFaceView = function(){
    this.mouseX = 0;
    this.mouseY = 0;

  this.init();
};

JH.AboutFaceView.prototype = {
  init:function(){
    var that = this;

    //Init wrapper
    this.el = H.createEl('div',{
            position:'absolute',
            top:'0px',
            left:'0px',
            width:'100%',
            height:'100%',
            background:'#111',
            overflow:'hidden',
            visibility:'hidden',
            opacity:'0'
    });


        this.renderer                    = new THREE.WebGLRenderer({alpha:false});
        this.camera                      = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
        this.scene                       = new THREE.Scene();
        this.renderer.setClearColor(0x111111,1);
        this.scene.fog = new THREE.FogExp2( 0x111111, 0.005 );
        this.camera.position.z = 375;
        this.camera.lookAt(new THREE.Vector3());
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.el.appendChild(this.renderer.domElement);

        this.renderer.domElement.style.marginLeft = '-10%';

        var light = new THREE.PointLight(0xFFFFFF, 1);
        light.position.y = 200;
        light.position.x = 200;
        light.position.z = 400;
        this.scene.add(light);

        this.material = new THREE.MeshLambertMaterial({color:0xffffff,map:THREE.ImageUtils.loadTexture('assets/3d/NeutralBW.png')});

        this.loader = new THREE.OBJLoader();
        this.loader.load('assets/3d/Neutral.obj', function ( object ) {
            that.model = object.children[0];
            that.model.geometry.computeVertexNormals(true);
            that.scene.add( that.model );
            that.model.material = that.material;

            that.eyeRight = new THREE.Mesh(new THREE.SphereGeometry(15,16),new THREE.MeshBasicMaterial({color:0xffffff,map:THREE.ImageUtils.loadTexture('assets/3d/eyeBW.png')}));
            that.eyeRight.position.set(31,30,26);
            that.eyeRight.rotation.y = -Math.PI/2;
            that.scene.add(that.eyeRight);

            that.eyeLeft = new THREE.Mesh(new THREE.SphereGeometry(15,16),new THREE.MeshBasicMaterial({color:0xffffff,map:THREE.ImageUtils.loadTexture('assets/3d/eyeBW.png')}));
            that.eyeLeft.position.set(-30,33,26);
            that.eyeLeft.rotation.y = -Math.PI/2;
            that.scene.add(that.eyeLeft);
        });
  },

    animateIn:function(){
        this.shouldLoop = true;
        this.loop();

        TweenMax.fromTo(this.el,1,{width:0,autoAlpha:1},{width:'100%',ease:Expo.easeInOut});

        TweenMax.fromTo([this.model.position],2,{z:-200},{z:0,delay:1});
        TweenMax.fromTo([this.eyeRight.position,this.eyeLeft.position],2,{z:-174},{z:26,delay:1});

        //document.addEventListener( 'mousemove', $.proxy(this.onDocumentMouseMove,this), false );
        $(window).mousemove($.proxy(this.onDocumentMouseMove,this));

    },

    animateOut:function(){
        var that = this;

        $(window).unbind('mousemove');

         this.shouldLoop = false;

        TweenMax.to(this.el,1,{width:0,ease:Expo.easeInOut,delay:0.5,onComplete:function(){
            that.el.style.visibility = 'hidden';
        }});
    },

    onDocumentMouseMove:function ( event ) {

        this.mouseX = ( event.clientX - window.innerWidth/2 ) / 4;
        this.mouseY = ( event.clientY - window.innerHeight/2 ) / 4;

    },

    loop:function(){
        if(this.shouldLoop){
            requestAnimationFrame($.proxy(this.loop,this));
        }
        else{
            return;
        }

        this.camera.position.x += ( -this.mouseX - this.camera.position.x ) * .05;
        this.camera.position.y += (  this.mouseY - this.camera.position.y ) * .05;

        this.eyeRight.rotation.x += ( this.mouseY*0.0015 - this.eyeRight.rotation.x ) * .05;
        this.eyeRight.rotation.y += ( this.mouseX*0.0025-Math.PI/2 - this.eyeRight.rotation.y ) * .05;

        this.eyeLeft.rotation.x += ( this.mouseY*0.0015 - this.eyeLeft.rotation.x ) * .05;
        this.eyeLeft.rotation.y += ( this.mouseX*0.0025-Math.PI/2 - this.eyeLeft.rotation.y ) * .05;

        this.camera.lookAt(new THREE.Vector3());

        this.renderer.render(this.scene, this.camera);
    },

    resize:function(){
        var that = this;

       this.renderer.setSize( window.innerWidth, window.innerHeight);
       this.camera.aspect = window.innerWidth / window.innerHeight;
       this.camera.updateProjectionMatrix();
    }
};
</script>



    <footer>
    </footer>
  </body>
</html>
